// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2021 19:04:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SelectInput
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SelectInput_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [21:0] In1;
reg [21:0] In2;
reg Sel;
// wires                                               
wire [21:0] Out;

// assign statements (if any)                          
SelectInput i1 (
// port map - connection between master ports and signals/registers   
	.In1(In1),
	.In2(In2),
	.Out(Out),
	.Sel(Sel)
);
initial 
begin 
#100000000 $finish;
end 
// In1[ 21 ]
initial
begin
	In1[21] = 1'b1;
end 
// In1[ 20 ]
initial
begin
	In1[20] = 1'b0;
	In1[20] = #40000000 1'b1;
	In1[20] = #40000000 1'b0;
end 
// In1[ 19 ]
initial
begin
	In1[19] = 1'b1;
end 
// In1[ 18 ]
initial
begin
	In1[18] = 1'b1;
	In1[18] = #40000000 1'b0;
end 
// In1[ 17 ]
initial
begin
	In1[17] = 1'b0;
	In1[17] = #40000000 1'b1;
end 
// In1[ 16 ]
initial
begin
	In1[16] = 1'b1;
end 
// In1[ 15 ]
initial
begin
	In1[15] = 1'b0;
end 
// In1[ 14 ]
initial
begin
	In1[14] = 1'b0;
end 
// In1[ 13 ]
initial
begin
	In1[13] = 1'b1;
	In1[13] = #40000000 1'b0;
end 
// In1[ 12 ]
initial
begin
	In1[12] = 1'b1;
	In1[12] = #40000000 1'b0;
	In1[12] = #40000000 1'b1;
end 
// In1[ 11 ]
initial
begin
	In1[11] = 1'b0;
	In1[11] = #40000000 1'b1;
end 
// In1[ 10 ]
initial
begin
	In1[10] = 1'b0;
end 
// In1[ 9 ]
initial
begin
	In1[9] = 1'b0;
	In1[9] = #80000000 1'b1;
end 
// In1[ 8 ]
initial
begin
	In1[8] = 1'b1;
	In1[8] = #80000000 1'b0;
end 
// In1[ 7 ]
initial
begin
	In1[7] = 1'b1;
	In1[7] = #40000000 1'b0;
	In1[7] = #40000000 1'b1;
end 
// In1[ 6 ]
initial
begin
	In1[6] = 1'b0;
	In1[6] = #40000000 1'b1;
	In1[6] = #40000000 1'b0;
end 
// In1[ 5 ]
initial
begin
	In1[5] = 1'b0;
	In1[5] = #80000000 1'b1;
end 
// In1[ 4 ]
initial
begin
	In1[4] = 1'b0;
	In1[4] = #40000000 1'b1;
	In1[4] = #40000000 1'b0;
end 
// In1[ 3 ]
initial
begin
	In1[3] = 1'b1;
end 
// In1[ 2 ]
initial
begin
	In1[2] = 1'b1;
	In1[2] = #40000000 1'b0;
	In1[2] = #40000000 1'b1;
end 
// In1[ 1 ]
initial
begin
	In1[1] = 1'b1;
	In1[1] = #40000000 1'b0;
end 
// In1[ 0 ]
initial
begin
	In1[0] = 1'b1;
end 
// In2[ 21 ]
initial
begin
	In2[21] = 1'b0;
	In2[21] = #60000000 1'b1;
end 
// In2[ 20 ]
initial
begin
	In2[20] = 1'b1;
	In2[20] = #60000000 1'b0;
end 
// In2[ 19 ]
initial
begin
	In2[19] = 1'b1;
	In2[19] = #30000000 1'b0;
	In2[19] = #30000000 1'b1;
	In2[19] = #30000000 1'b0;
end 
// In2[ 18 ]
initial
begin
	In2[18] = 1'b1;
	In2[18] = #60000000 1'b0;
end 
// In2[ 17 ]
initial
begin
	In2[17] = 1'b0;
	In2[17] = #30000000 1'b1;
	In2[17] = #30000000 1'b0;
	In2[17] = #30000000 1'b1;
end 
// In2[ 16 ]
initial
begin
	In2[16] = 1'b0;
	In2[16] = #30000000 1'b1;
end 
// In2[ 15 ]
initial
begin
	In2[15] = 1'b1;
	In2[15] = #30000000 1'b0;
	In2[15] = #30000000 1'b1;
	In2[15] = #30000000 1'b0;
end 
// In2[ 14 ]
initial
begin
	In2[14] = 1'b0;
	In2[14] = #90000000 1'b1;
end 
// In2[ 13 ]
initial
begin
	In2[13] = 1'b0;
	In2[13] = #60000000 1'b1;
end 
// In2[ 12 ]
initial
begin
	In2[12] = 1'b1;
	In2[12] = #30000000 1'b0;
	In2[12] = #30000000 1'b1;
end 
// In2[ 11 ]
initial
begin
	In2[11] = 1'b1;
	In2[11] = #60000000 1'b0;
	In2[11] = #30000000 1'b1;
end 
// In2[ 10 ]
initial
begin
	In2[10] = 1'b1;
	In2[10] = #30000000 1'b0;
end 
// In2[ 9 ]
initial
begin
	In2[9] = 1'b0;
	In2[9] = #30000000 1'b1;
	In2[9] = #60000000 1'b0;
end 
// In2[ 8 ]
initial
begin
	In2[8] = 1'b1;
	In2[8] = #90000000 1'b0;
end 
// In2[ 7 ]
initial
begin
	In2[7] = 1'b1;
	In2[7] = #30000000 1'b0;
	In2[7] = #60000000 1'b1;
end 
// In2[ 6 ]
initial
begin
	In2[6] = 1'b1;
	In2[6] = #60000000 1'b0;
	In2[6] = #30000000 1'b1;
end 
// In2[ 5 ]
initial
begin
	In2[5] = 1'b0;
	In2[5] = #90000000 1'b1;
end 
// In2[ 4 ]
initial
begin
	In2[4] = 1'b0;
	In2[4] = #30000000 1'b1;
	In2[4] = #30000000 1'b0;
	In2[4] = #30000000 1'b1;
end 
// In2[ 3 ]
initial
begin
	In2[3] = 1'b1;
	In2[3] = #60000000 1'b0;
end 
// In2[ 2 ]
initial
begin
	In2[2] = 1'b1;
	In2[2] = #30000000 1'b0;
end 
// In2[ 1 ]
initial
begin
	In2[1] = 1'b0;
	In2[1] = #90000000 1'b1;
end 
// In2[ 0 ]
initial
begin
	In2[0] = 1'b0;
	In2[0] = #30000000 1'b1;
end 

// Sel
initial
begin
	Sel = 1'b0;
	Sel = #10240000 1'b1;
	Sel = #11520000 1'b0;
	Sel = #4480000 1'b1;
	Sel = #9600000 1'b0;
	Sel = #14720000 1'b1;
	Sel = #7680000 1'b0;
	Sel = #9600000 1'b1;
	Sel = #17920000 1'b0;
end 
endmodule

